#
# weechat -- trigger.conf
#
# WARNING: It is NOT recommended to edit this file by hand,
# especially if WeeChat is running.
#
# Use commands like /set or /fset to change settings in WeeChat.
#
# For more info, see: https://weechat.org/doc/quickstart/
#

[look]
enabled = on
monitor_strip_colors = off

[color]
flag_command = lightgreen
flag_conditions = yellow
flag_post_action = lightblue
flag_regex = lightcyan
flag_return_code = lightmagenta
identifier = cyan
regex = white
replace = cyan
trigger = green
trigger_disabled = red

[trigger]
apostrophe.arguments = "prettype_before"
apostrophe.command = ""
apostrophe.conditions = ""
apostrophe.enabled = on
apostrophe.hook = modifier
apostrophe.post_action = none
apostrophe.regex = "/è/é/tg_string /È/É/tg_string"
apostrophe.return_code = ok
beep.arguments = ""
beep.command = "/print -beep"
beep.conditions = "${tg_displayed} && ${tg_tags} !!- ,notify_none, && (${tg_highlight} || ${tg_msg_pv}) && ${buffer.notify} > 0"
beep.enabled = off
beep.hook = print
beep.post_action = none
beep.regex = ""
beep.return_code = ok
block_ctcp.arguments = "irc_in_privmsg"
block_ctcp.command = ""
block_ctcp.conditions = "${arguments} =~ ^[^ ]+ :${\x01}.*${\x01}$ && ${arguments} !~ ^[^ ]+ :${\x01}ACTION"
block_ctcp.enabled = on
block_ctcp.hook = modifier
block_ctcp.post_action = none
block_ctcp.regex = "/.*//"
block_ctcp.return_code = ok
chanmon_like.arguments = "*;irc_privmsg"
chanmon_like.command = "/print -newbuffer chanmon -tags ${tg_tags} ${cutscr:5,${color:${weechat.color.chat_prefix_more}}${weechat.look.prefix_buffer_align_more},${color:${info:nick_color_name,${server}}}${server}}${color:${info:nick_color_name,${channel}}}${channel}\t${if:${tg_tags} !~ ,irc_action,?${weechat.look.quote_nick_prefix}${tg_prefix}${color:reset}${weechat.look.quote_nick_suffix}:${tg_prefix}${color:reset}} ${color:.gray}${tg_message}"
chanmon_like.conditions = "${buffer.local_variables.type} == channel && ${buffer.full_name} !~ ^irc.libera.(##news|#italy)$"
chanmon_like.enabled = on
chanmon_like.hook = print
chanmon_like.post_action = none
chanmon_like.regex = ""
chanmon_like.return_code = ok
cmd_pass.arguments = "5000|input_text_display;5000|history_add;5000|irc_command_auth"
cmd_pass.command = ""
cmd_pass.conditions = ""
cmd_pass.enabled = on
cmd_pass.hook = modifier
cmd_pass.post_action = none
cmd_pass.regex = "s==^((/(msg|m|quote) +(-server +[^ ]+ +)?nickserv +(id|identify|set +password|ghost +[^ ]+|release +[^ ]+|regain +[^ ]+|recover +[^ ]+|setpass +[^ ]+) +)|/oper +[^ ]+ +|/quote +pass +|/secure +(passphrase|decrypt|set +[^ ]+) +)(.*)==${re:1}${hide:*,${re:+}}"
cmd_pass.return_code = ok
cmd_pass_register.arguments = "5000|input_text_display;5000|history_add;5000|irc_command_auth"
cmd_pass_register.command = ""
cmd_pass_register.conditions = ""
cmd_pass_register.enabled = on
cmd_pass_register.hook = modifier
cmd_pass_register.post_action = none
cmd_pass_register.regex = "s==^(/(msg|m|quote) +(-server +[^ ]+ +)?nickserv +register +)([^ ]+)(.*)==${re:1}${hide:*,${re:4}}${re:5}"
cmd_pass_register.return_code = ok
color_my_lines.arguments = "weechat_print"
color_my_lines.command = ""
color_my_lines.conditions = "${tg_tags} =~ ,nick_suffered,"
color_my_lines.enabled = on
color_my_lines.hook = modifier
color_my_lines.post_action = none
color_my_lines.regex = "/.*/${tg_prefix}\t${color:green}${tg_message_nocolor}"
color_my_lines.return_code = ok
colorize_line_highlight.arguments = "*"
colorize_line_highlight.command = ""
colorize_line_highlight.conditions = "${highlight}"
colorize_line_highlight.enabled = off
colorize_line_highlight.hook = line
colorize_line_highlight.post_action = none
colorize_line_highlight.regex = "/.*/${color:blue,${weechat.color.chat_highlight_bg}}${re:0}/message"
colorize_line_highlight.return_code = ok
complete_last_nick.arguments = "/input complete_next"
complete_last_nick.command = "/input insert ${last_nick}"
complete_last_nick.conditions = "${type} == channel && ${buffer.input_buffer_length} == 0 && ${last_nick}"
complete_last_nick.enabled = on
complete_last_nick.hook = command_run
complete_last_nick.post_action = none
complete_last_nick.regex = ""
complete_last_nick.return_code = ok
delete_time.arguments = "*;core.chanmon"
delete_time.command = ""
delete_time.conditions = "${tags} =~ ,irc_time,"
delete_time.enabled = on
delete_time.hook = line
delete_time.post_action = none
delete_time.regex = "/.*//buffer_name"
delete_time.return_code = ok
delete_topic.arguments = "*;irc.libera.#linux-it"
delete_topic.command = ""
delete_topic.conditions = "${tags} =~ ,irc_topic,"
delete_topic.enabled = on
delete_topic.hook = line
delete_topic.post_action = none
delete_topic.regex = "/.*//buffer_name"
delete_topic.return_code = ok
dot_space.arguments = "input_text_for_buffer"
dot_space.command = ""
dot_space.conditions = "${tg_string} !~ ^/"
dot_space.enabled = on
dot_space.hook = modifier
dot_space.post_action = none
dot_space.regex = "/[\ +$][\.]/${re:1}.${re:2}/"
dot_space.return_code = ok
escla_space.arguments = "input_text_for_buffer"
escla_space.command = ""
escla_space.conditions = "${tg_string} !~ ^/"
escla_space.enabled = on
escla_space.hook = modifier
escla_space.post_action = none
escla_space.regex = "/[\ +$][\!]/${re:1}!${re:2}/"
escla_space.return_code = ok
force_redraw.arguments = "window_switch;buffer_switch"
force_redraw.command = "/wait 1ms /redraw"
force_redraw.conditions = ""
force_redraw.enabled = on
force_redraw.hook = signal
force_redraw.post_action = none
force_redraw.regex = ""
force_redraw.return_code = ok
group_tools_item.arguments = "group_tools_item;manage the items of a group;set <group> <namespace> <section>,[<section>...] <option>,[<option>...] <value> || add <group> <item> ${\x22}[<option>,[<option>...]]${\x22} ${\x22}[<value>]${\x22} [${\x22}[<value>]${\x22}...] || del <group> <item> [<item>...];      set: change the value of one or more options of one or more sections${\n}      add: add a new item${\n}      del: delete one or more items${\n}    group: a group${\n}namespace: a namespace${\n}  section: a section${\n}   option: an option${\n}    value: a value for an option${\n}     item: name of an item${\n}${\n}Add or replace an item named nick in the chanmon group:${\n}${\n}   /${tg_trigger_name} add chanmon nick ${\x22}${\x22} ${\x22}5${\x22} ${\x22}5${\x22} ${\x22}white${\x22} ${\x22}24${\x22} ${\x22}black${\x22} ${\x22}${raw:${tg_tag_nick}}${\x22}${\n}${\n}The first 5 will end up in the option named 1, the second 5 will end up in the option named 2 and so on. These names of options are not really useful, to give them a name:${\n}${\n}   /${tg_trigger_name} del chanmon nick${\n}   /${tg_trigger_name} add chanmon nick ${\x22}min_length,max_length,fg,bg,separator,content${\x22} ${\x22}5${\x22} ${\x22}5${\x22} ${\x22}white${\x22} ${\x22}24${\x22} ${\x22}black${\x22} ${\x22}${raw:${tg_tag_nick}}${\x22}${\n}${\n}now the first 5 will end up in min_length, the second 5 will end up in max_length and so on. It's tedious to repeat the options names everytime. You can give the defaults name just once:${\n}${\n}   /${tg_trigger_name} del chanmon nick${\n}   /${tg_trigger_name} set chanmon all general defaults_options min_length,max_length,fg,bg,separator,content${\n}   /${tg_trigger_name} add chanmon nick ${\x22}${\x22} ${\x22}5${\x22} ${\x22}5${\x22} ${\x22}white${\x22} ${\x22}24${\x22} ${\x22}black${\x22} ${\x22}${raw:${tg_tag_nick}}${\x22};set|add|del"
group_tools_item.command = "/command -buffer core.weechat * /eval -s ${my_cmds_to_run}"
group_tools_item.conditions = "${define:my_regex,[abcdefghijklmnopqrstuvwxyz0-9_]+}${tg_argv_eol1} =~ (?-i)^set +${my_regex} +${my_regex} +(${my_regex},?)+ +(${my_regex},?)+ . || ${tg_argv_eol1} =~ (?-i)^add +${my_regex} +${my_regex} . && ${tg_shell_argc} > 5 || ${tg_argv_eol1} =~ (?-i)^del +${my_regex} +(${my_regex} *)+$"
group_tools_item.enabled = on
group_tools_item.hook = command
group_tools_item.post_action = none
group_tools_item.regex = "/.*/${tg_argv1}/my_action /.*/${tg_argv2}/my_group /.*/${if:${my_action}==set?${tg_argv3}}/my_namespace /.*/plugins.var.group_tools.${my_group}/my_opt_prefix /.*/${if:${my_action}==add?${tg_argv3}:${if:${my_action}==del?${tg_argv_eol3}}}/my_items / +/,/my_items /.*/${if:${my_action}==set?${tg_argv4}}/my_sections /[^,]$/${re:0},/my_sections /.*/${if:${my_action}==set?${tg_argv5}}/my_options /[^,]$/${re:0},/my_options /.*/${if:${my_action}==set?${split:count,,strip_right,${my_sections}}}/my_number_of_sections /.*/${if:${my_action}==set?${split:count,,strip_right,${my_options}}}/my_number_of_options /[^,]+,/${repeat:${my_number_of_options},${re:0}}/my_sections /.+/${repeat:${my_number_of_sections},${re:0}}/my_options ===([^,]+),===${define:my_option,${split:${re:repl_index},,,${my_options}}}/mute -core /set ${my_opt_prefix}.${my_namespace}.${re:1}.${my_option} \${base_decode:16,${base_encode:16,${tg_argv_eol6}}};===my_sections /$/${my_sections}/my_cmds_to_run /.*/${if:${my_action}==add?${repeat:${calc:${tg_shell_argc}-5},,}}/my_add_cmds ===,===${define:my_option,${if:${split:${re:repl_index},,,${tg_shell_argv4}}=~^[abcdefghijklmnopqrstuvwxyz0-9_]+$?${split:${re:repl_index},,,${tg_shell_argv4}}:${if:${split:${re:repl_index},,,${${my_opt_prefix}.all.general.defaults_options}}=~^[abcdefghijklmnopqrstuvwxyz0-9_]+$?${split:${re:repl_index},,,${${my_opt_prefix}.all.general.defaults_options}}:${re:repl_index}}}}/mute -core /set ${my_opt_prefix}.item.${my_items}.${my_option} '\${base_decode:16,${base_encode:16,${tg_shell_argv${calc:4+${re:repl_index}}}}}';===my_add_cmds /$/${my_add_cmds}/my_cmds_to_run /.*/${if:${my_action}==del?${my_items}}/my_del_cmds ===([^,]+),?===/mute -core /unset -mask ${my_opt_prefix}.item.${re:1}.*;===my_del_cmds /$/${my_del_cmds}/my_cmds_to_run"
group_tools_item.return_code = ok
group_tools_list.arguments = "group_tools_list;manage the list of a group;clear <group> || push|push_if_not|remove|content <group> <item> [<item>...];      clear: clear a list${\n}       push: put one or more items at the end of a list${\n}push_if_not: put one or more items at the end of a list if not already in the list${\n}     remove: remove one or more items in a list${\n}    content: replace a list${\n}      group: a group${\n}       item: name of an item${\n}${\n}Push an item at the end of the list only if this item is not already part of the list:${\n}${\n}   /${tg_trigger_name} push_if_not chanmon nick${\n}${\n}Push two items at the end of the list even if they might already be present:${\n}${\n}   /${tg_trigger_name} push chanmon chan nick;content|clear|push|push_if_not|remove"
group_tools_list.command = "/command -buffer core.weechat * /eval -s ${my_cmds_to_run}"
group_tools_list.conditions = "${tg_argv_eol1} =~ (?-i)^clear +[abcdefghijklmnopqrstuvwxyz0-9_]+ +[abcdefghijklmnopqrstuvwxyz0-9_]+$ || ${tg_argv_eol1} =~ (?-i)^(content|push|push_if_not|remove) +[abcdefghijklmnopqrstuvwxyz0-9_]+ +[abcdefghijklmnopqrstuvwxyz0-9_]+ +([abcdefghijklmnopqrstuvwxyz0-9_]+ *)+$"
group_tools_list.enabled = on
group_tools_list.hook = command
group_tools_list.post_action = none
group_tools_list.regex = "/.*/${tg_argv1}/my_action /.*/${tg_argv2}/my_group /.*/${tg_argv3}/my_list_name /.*/plugins.var.group_tools.${my_group}/my_opt_prefix /.*/${${my_opt_prefix}.list.${my_list_name}.list}/my_list /[^,]+/${if:${re:0}=~^[abcdefghijklmnopqrstuvwxyz0-9_]+$?${re:0}}/my_list /.*/${tg_argv_eol4}/my_items / +/,/my_items /.*/${if:${my_action}==push_if_not?${my_items}}/my_push_if_not_items /[^,]+/${if:,${my_list},!-,${re:0},&&,${split:${calc:${re:repl_index}+1},,keep_eol,${my_items}},!-,${re:0},?${re:0}}/my_push_if_not_items /.*/${if:${my_action}==remove?${my_list}}/my_remove_items /[^,]+/${if:,${my_items},!-,${re:0},?${re:0}}/my_remove_items /.*/${if:${my_action}==push_if_not?${my_push_if_not_items}:${if:${my_action}==remove?${my_remove_items}:${re:0}}}/my_items /,+/,/my_items /^,|,$//my_items /.*/${if:${my_action}=~^(content|remove)$?${my_items}:${if:${my_action}=~^push?${re:0},${my_items}}}/my_list /,+/,/my_list /^,|,$//my_list ===$===/mute -core /set ${my_opt_prefix}.list.${my_list_name}.list '${my_list}';===my_cmds_to_run"
group_tools_list.return_code = ok
highmon_like.arguments = "*;irc_privmsg"
highmon_like.command = "/print -newbuffer highmon -tags ${tg_tags} ${cutscr:5,${color:${weechat.color.chat_prefix_more}}${weechat.look.prefix_buffer_align_more},${color:${info:nick_color_name,${server}}}${server}}${color:${info:nick_color_name,${channel}}}${channel}\t${if:${tg_tags} !~ ,irc_action,?${weechat.look.quote_nick_prefix}${tg_prefix}${color:reset}${weechat.look.quote_nick_suffix}:${tg_prefix}${color:reset}} ${color:.gray}${tg_message}"
highmon_like.conditions = "${tg_highlight} == 1 && ${tg_displayed} == 1 && ${buffer.local_variables.type} == channel"
highmon_like.enabled = on
highmon_like.hook = print
highmon_like.post_action = none
highmon_like.regex = ""
highmon_like.return_code = ok
input_backtick.arguments = "500|input_text_display"
input_backtick.command = ""
input_backtick.conditions = ""
input_backtick.enabled = on
input_backtick.hook = modifier
input_backtick.post_action = none
input_backtick.regex = "/(^|)(\[(.*)\])/${re:1}${color:,darkgray}${re:2}${re:4}${color:,default}${re:5}/"
input_backtick.return_code = ok
input_command_color.arguments = "500|input_text_display"
input_command_color.command = ""
input_command_color.conditions = "${tg_string} =~ ^/($|[^/])"
input_command_color.enabled = on
input_command_color.hook = modifier
input_command_color.post_action = none
input_command_color.regex = "#/(.+)#${color:39}/${color:74}${re:1}#"
input_command_color.return_code = ok
inter_space.arguments = "input_text_for_buffer"
inter_space.command = ""
inter_space.conditions = "${tg_string} !~ ^/"
inter_space.enabled = on
inter_space.hook = modifier
inter_space.post_action = none
inter_space.regex = "/[\ +$][\?]/${re:1}?${re:2}/"
inter_space.return_code = ok
last_nick.arguments = "irc.*;notify_message"
last_nick.command = "/buffer set localvar_set_last_nick ${tg_tag_nick}"
last_nick.conditions = "${tg_displayed} && ${type} == channel && ${tg_tag_nick} != ${nick}"
last_nick.enabled = on
last_nick.hook = print
last_nick.post_action = none
last_nick.regex = ""
last_nick.return_code = ok
mon_cut.arguments = "weechat_print"
mon_cut.command = ""
mon_cut.conditions = "${buffer.full_name} =~ ^core.(highmon|chanmon)$"
mon_cut.enabled = on
mon_cut.hook = modifier
mon_cut.post_action = none
mon_cut.regex = "/^([^\t]*)\t(.*)$/${cutscr:11,+,${re:1}}\t${re:2}/"
mon_cut.return_code = ok
msg_auth.arguments = "5000|irc_message_auth"
msg_auth.command = ""
msg_auth.conditions = ""
msg_auth.enabled = on
msg_auth.hook = modifier
msg_auth.post_action = none
msg_auth.regex = "s==^(.*(id|identify|set +password|register|ghost +[^ ]+|release +[^ ]+|regain +[^ ]+|recover +[^ ]+) +)(.*)==${re:1}${hide:*,${re:+}}"
msg_auth.return_code = ok
nick_cut.arguments = "weechat_print"
nick_cut.command = ""
nick_cut.conditions = "${buffer.full_name} !~ ^core.(highmon|chanmon)$"
nick_cut.enabled = on
nick_cut.hook = modifier
nick_cut.post_action = none
nick_cut.regex = "/^([^\t]*)\t(.*)$/${cutscr:7,+,${re:1}}\t${re:2}/"
nick_cut.return_code = ok
nullpointer.arguments = "nullpointer"
nullpointer.command = "/command -buffer ${buffer.full_name} core /input delete_line;/command -buffer ${buffer.full_name} core /input insert ${out}"
nullpointer.conditions = ""
nullpointer.enabled = on
nullpointer.hook = hsignal
nullpointer.post_action = none
nullpointer.regex = "/\n//out"
nullpointer.return_code = ok
numberjump.arguments = "2000|input_text_for_buffer"
numberjump.command = ""
numberjump.conditions = "${tg_string} =~ ^/[0-9]+$"
numberjump.enabled = on
numberjump.hook = modifier
numberjump.post_action = none
numberjump.regex = "=\/([0-9]+)=/buffer *${re:1}="
numberjump.return_code = ok
preview_nick_colors.arguments = "2000|input_text_display"
preview_nick_colors.command = ""
preview_nick_colors.conditions = "${tg_string} =~ ^/set\s+weechat\.color\.chat_nick_colors\s+"
preview_nick_colors.enabled = on
preview_nick_colors.hook = modifier
preview_nick_colors.post_action = none
preview_nick_colors.regex = "/^\S+\s+\S+(.+)$/${re:1}/tg_string_nocolor /([^",]+)/${color:${re:1}}${re:1}${color:default}/tg_string_nocolor /^(\S+\s+\S+).*$/${re:1}${tg_string_nocolor}/tg_string"
preview_nick_colors.return_code = ok
print_backtick.arguments = "weechat_print"
print_backtick.command = ""
print_backtick.conditions = ""
print_backtick.enabled = on
print_backtick.hook = modifier
print_backtick.post_action = none
print_backtick.regex = "/(^|)(\[(.*)\])/${re:1}${color:,darkgray}${re:2}${color:,default}/"
print_backtick.return_code = ok
server_pass.arguments = "5000|input_text_display;5000|history_add"
server_pass.command = ""
server_pass.conditions = ""
server_pass.enabled = on
server_pass.hook = modifier
server_pass.post_action = none
server_pass.regex = "s==^(/(server|connect) .*-(sasl_)?password=)([^ ]+)(.*)==${re:1}${hide:*,${re:4}}${re:5}"
server_pass.return_code = ok
unwanted_msg.arguments = "input_text_for_buffer"
unwanted_msg.command = "/print -current -tags no_log unwanted message deleted:${tg_string_nocolor}"
unwanted_msg.conditions = "${tg_string} =~ ^\s+(/|.|,)"
unwanted_msg.enabled = on
unwanted_msg.hook = modifier
unwanted_msg.post_action = none
unwanted_msg.regex = "/.*//"
unwanted_msg.return_code = ok
url_color.arguments = "weechat_print"
url_color.command = ""
url_color.conditions = "${tg_tags} !~ irc_quit"
url_color.enabled = on
url_color.hook = modifier
url_color.post_action = none
url_color.regex = ";[a-z]+://\S+;${color:32}${re:0}${color:reset};"
url_color.return_code = ok
userlabel.arguments = "weechat_print"
userlabel.command = ""
userlabel.conditions = ""
userlabel.enabled = on
userlabel.hook = modifier
userlabel.post_action = none
userlabel.regex = "/^[^@]+@(.+)$/${re:1}/tg_tag_host /^.+$/${re:0} ${color:darkgray}${plugins.var.trigger.userlabel.${tg_tag_host}}"
userlabel.return_code = ok
virgo_space.arguments = "input_text_for_buffer"
virgo_space.command = ""
virgo_space.conditions = "${tg_string} !~ ^/"
virgo_space.enabled = on
virgo_space.hook = modifier
virgo_space.post_action = none
virgo_space.regex = "/[\ +$][\,]/${re:1},${re:2}/"
virgo_space.return_code = ok
whois_on_query.arguments = "irc_pv_opened"
whois_on_query.command = "/command -buffer ${buffer[${tg_signal_data}].full_name} * wii ${buffer[${tg_signal_data}].local_variables.channel}"
whois_on_query.conditions = ""
whois_on_query.enabled = on
whois_on_query.hook = signal
whois_on_query.post_action = none
whois_on_query.regex = ""
whois_on_query.return_code = ok
